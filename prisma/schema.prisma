// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement()) //integer, primary key, auto increment
  name        String   @unique
  vendorCode  String   @unique
  reviews     String?
  rating      Float?   @default(0)
  article     String   @unique
  type        String
  properties  Json?    @db.JsonB
  description String?
  price       Decimal  @default(0.00) @db.Decimal(10, 2) // до 10 знаков, из них 2 после запятой
  enabled     Boolean  @default(false)
  image       String?
  quantity    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  Reviews    Reviews[]
  //Cart_Item  Cart_Item[]
  Order_Item Order_Item[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String    @unique
  role       Role      @default(USER)
  firstname  String
  secondname String
  reviews    Reviews[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Order      Order[]
  Cart       Cart?
}

enum Role {
  USER
  ADMIN
}

model Reviews {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Order {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  totalPrice Decimal      @default(0.00) @db.Decimal(10, 2)
  status     String       
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  Order_Item Order_Item[]
}

model Order_Item {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
}

model Cart {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int         @unique
  products  Json?       @db.JsonB //хранится массив id(продукта) и количества
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  Cart_Item Cart_Item[]
}

model Cart_Item {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
}
